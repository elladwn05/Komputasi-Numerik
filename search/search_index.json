{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Biodata Nama : Ella Dwi Novitasari NIM : 180411100126 Kelas : Komputasi Numerik 4B Dosen Pengampu : Mula'ab,S.SI.,M.kom Jurusan : Teknik Informatika Alamat : Perumahan Graha Indah N-12A, Lamongan","title":"Biodata"},{"location":"#biodata","text":"Nama : Ella Dwi Novitasari NIM : 180411100126 Kelas : Komputasi Numerik 4B Dosen Pengampu : Mula'ab,S.SI.,M.kom Jurusan : Teknik Informatika Alamat : Perumahan Graha Indah N-12A, Lamongan","title":"Biodata"},{"location":"Eliminasi Gauss/","text":"","title":"Eliminasi Gauss"},{"location":"Error in Numerical Computations/","text":"Error in Numerical Computations Pengertian Error atau galat merupakan perbedaan antara hasil penyelesaian suatu model matematik secara numerik dengan penyelesaian secara analitis. Kesalahan yang terjadi sangatlah penting karena kesalahan dalam pemakaian algoritma pendekatan akan menyebabkan nilai kesalahan yang besar, sehingga pendekatan metode numerik selalu membahas tingkat kesalahan dan tingkat kecepatan proses yang akan terjadi. Masalah-masalah matematika yang sering kita selesaikan biasanya menggunakan metode analitik atau metode sejati yaitu suatu metode yang memberikan solusi yang sesungguhnya karena memiliki galat ( error ) yang bernilai nol, tetapi penyelesaian dengan menggunakan metode analitik hanya terbatas tidak selalu bisa diterapkan, maka solusinya masih dapat dicari yaitu dengan menggunakan metode numerik. Pada metode numerik solusinya merupakan hampiran (pendekatan) terhadap solusi sejati. Nilai galat (nilai kesalahan) Besarnya kesalahan atas suatu nilai taksiran dapat dinyatakan secara kuantitatif dan kualitatif. Besarnya kesalahan yang dinyatakan secara kuantitatif disebut Kesalahan Absolut. Besarnya kesalahan yang dinyatakan secara kualitatif disebut dengan Kesalahan Relatif. Absolute error Kesalahan absolut suatu kuantitas adalah nilai absolut dari selisih antara nilai sebenarnya X dan nilai perkiraan x. Ini dilambangkan dengan : $$ Ea = |X - x| $$ Relative error Relative error biasa disebut sebagai kesalahan relatif dari suatu kuantitas adalah rasio kesalahan absolutnya terhadap nilai sebenarnya. Ini dilambangkan dengan : $$ Er = |Xt - Xa / Xt| $$ Penyebab terjadinya error Dibedakan menjadi 3, yaitu : Round-off-errors Truncation errors Inherent errors Penjelasan Round-off-errors Perhitungan dengan metode numerik hampir selalu menggunakan bilangan riil. Masalah timbul bila komputasi numerik dikerjakan oleh mesin (dalam hal ini komputer) karena semua bilangan riil tidak dapat disajikan secara tepat di dalam komputer, keterbatasan komputer dalam menyajikan bilangan riil menghasilkan galat yang disebut galat pembulatan. Truncation errors Galat pemotongan adalah galat yang ditimbulkan oleh pembatasan jumlah komputasi yang digunakan pada proses metode numerik. Banyak metode dalam metode numerik yang penurunan rumusnya menggunakan proses iterasi yang jumlahnya tak terhingga, sehingga untuk membatasi proses penghitungan, jumlah iterasi dibatasi sampai langkah ke n. Hasil penghitungan sampai langkah ke n akan menjadi hasil hampiran dan nilai penghitungan langkah n keatas akan menjadi galat pemotongan. dalam hal ini galat pemotongan kan menjadi sangat kecil sekali jika nilai n di perbesar. Konsekuensinya tentu saja jumlah proses penghitungannya akan semakin banyak. Inherent errors Galat bawaan adalah galat dalam nilai data yang terjadi akibat kekeliruan dalam menyalin data, salah membaca skala atau kesalahan karena kurangnya pengertian mengenai hukum-hukum fisik dari data yang diukur. Kesalahan ini sering terjadi karena faktor human error. Maclaurin \u200b Suatu fungsi f(x) yang memiliki f'(x), f''(x), f'''(x) , dan seterusnya yang kontinyu dalam interval I dengan maka untuk x disekitar a yaitu , f(x) dapat diekspansi kedalam deret taylor \u200b Algoritma dari maclaurin dengan algoritma itu kita dapat menyederhanakan sebagai berikut : Listing program import math error = 0.001 def f(x): f_turunan = 1 current=i=0 iteration = True while iteration: old= current current += (f_turunan*(x**i))/math.factorial(i) print('f ke-', i,'=',current, 'Ea=', current-old ) if current-old < error: iteration = False else: f_turunan *=3 i +=1 f(4) output f ke- 0 = 1.0 Ea= 1.0 f ke- 1 = 13.0 Ea= 12.0 f ke- 2 = 85.0 Ea= 72.0 f ke- 3 = 373.0 Ea= 288.0 f ke- 4 = 1237.0 Ea= 864.0 f ke- 5 = 3310.6 Ea= 2073.6 f ke- 6 = 7457.799999999999 Ea= 4147.199999999999 f ke- 7 = 14567.285714285714 Ea= 7109.4857142857145 f ke- 8 = 25231.514285714286 Ea= 10664.228571428572 f ke- 9 = 39450.485714285714 Ea= 14218.971428571429 f ke- 10 = 56513.25142857143 Ea= 17062.765714285713 f ke- 11 = 75127.17766233766 Ea= 18613.926233766237 f ke- 12 = 93741.1038961039 Ea= 18613.926233766237 f ke- 13 = 110923.18965034965 Ea= 17182.085754245752 f ke- 14 = 125650.69172541745 Ea= 14727.502075067794 f ke- 15 = 137432.69338547168 Ea= 11782.00166005423 f ke- 16 = 146269.19463051236 Ea= 8836.50124504068 f ke- 17 = 152506.7249211293 Ea= 6237.530290616938 f ke- 18 = 156665.07844820726 Ea= 4158.3535270779685 f ke- 19 = 159291.4069916249 Ea= 2626.3285434176505 f ke- 20 = 160867.20411767552 Ea= 1575.797126050602 f ke- 21 = 161767.65961827585 Ea= 900.4555006003357 f ke- 22 = 162258.81716405787 Ea= 491.1575457820145 f ke- 23 = 162515.07327490064 Ea= 256.25611084277625 f ke- 24 = 162643.20133032204 Ea= 128.12805542140268 f ke- 25 = 162704.7027969243 Ea= 61.501466602261644 f ke- 26 = 162733.08808920227 Ea= 28.385292277962435 f ke- 27 = 162745.70377465914 Ea= 12.61568545686896 f ke- 28 = 162751.1104969978 Ea= 5.406722338666441 f ke- 29 = 162753.3477614138 Ea= 2.237264416005928 f ke- 30 = 162754.2426671802 Ea= 0.8949057663849089 f ke- 31 = 162754.58908231556 Ea= 0.34641513536917046 f ke- 32 = 162754.71898799133 Ea= 0.12990567577071488 f ke- 33 = 162754.7662264189 Ea= 0.04723842756357044 f ke- 34 = 162754.7828988051 Ea= 0.016672386205755174 f ke- 35 = 162754.7886150518 Ea= 0.005716246698284522 f ke- 36 = 162754.79052046736 Ea= 0.0019054155563935637 f ke- 37 = 162754.79113843996 Ea= 0.0006179726042319089","title":"Error in Numerical Computations"},{"location":"Error in Numerical Computations/#error-in-numerical-computations","text":"Pengertian Error atau galat merupakan perbedaan antara hasil penyelesaian suatu model matematik secara numerik dengan penyelesaian secara analitis. Kesalahan yang terjadi sangatlah penting karena kesalahan dalam pemakaian algoritma pendekatan akan menyebabkan nilai kesalahan yang besar, sehingga pendekatan metode numerik selalu membahas tingkat kesalahan dan tingkat kecepatan proses yang akan terjadi. Masalah-masalah matematika yang sering kita selesaikan biasanya menggunakan metode analitik atau metode sejati yaitu suatu metode yang memberikan solusi yang sesungguhnya karena memiliki galat ( error ) yang bernilai nol, tetapi penyelesaian dengan menggunakan metode analitik hanya terbatas tidak selalu bisa diterapkan, maka solusinya masih dapat dicari yaitu dengan menggunakan metode numerik. Pada metode numerik solusinya merupakan hampiran (pendekatan) terhadap solusi sejati. Nilai galat (nilai kesalahan) Besarnya kesalahan atas suatu nilai taksiran dapat dinyatakan secara kuantitatif dan kualitatif. Besarnya kesalahan yang dinyatakan secara kuantitatif disebut Kesalahan Absolut. Besarnya kesalahan yang dinyatakan secara kualitatif disebut dengan Kesalahan Relatif. Absolute error Kesalahan absolut suatu kuantitas adalah nilai absolut dari selisih antara nilai sebenarnya X dan nilai perkiraan x. Ini dilambangkan dengan : $$ Ea = |X - x| $$ Relative error Relative error biasa disebut sebagai kesalahan relatif dari suatu kuantitas adalah rasio kesalahan absolutnya terhadap nilai sebenarnya. Ini dilambangkan dengan : $$ Er = |Xt - Xa / Xt| $$ Penyebab terjadinya error Dibedakan menjadi 3, yaitu : Round-off-errors Truncation errors Inherent errors Penjelasan Round-off-errors Perhitungan dengan metode numerik hampir selalu menggunakan bilangan riil. Masalah timbul bila komputasi numerik dikerjakan oleh mesin (dalam hal ini komputer) karena semua bilangan riil tidak dapat disajikan secara tepat di dalam komputer, keterbatasan komputer dalam menyajikan bilangan riil menghasilkan galat yang disebut galat pembulatan. Truncation errors Galat pemotongan adalah galat yang ditimbulkan oleh pembatasan jumlah komputasi yang digunakan pada proses metode numerik. Banyak metode dalam metode numerik yang penurunan rumusnya menggunakan proses iterasi yang jumlahnya tak terhingga, sehingga untuk membatasi proses penghitungan, jumlah iterasi dibatasi sampai langkah ke n. Hasil penghitungan sampai langkah ke n akan menjadi hasil hampiran dan nilai penghitungan langkah n keatas akan menjadi galat pemotongan. dalam hal ini galat pemotongan kan menjadi sangat kecil sekali jika nilai n di perbesar. Konsekuensinya tentu saja jumlah proses penghitungannya akan semakin banyak. Inherent errors Galat bawaan adalah galat dalam nilai data yang terjadi akibat kekeliruan dalam menyalin data, salah membaca skala atau kesalahan karena kurangnya pengertian mengenai hukum-hukum fisik dari data yang diukur. Kesalahan ini sering terjadi karena faktor human error. Maclaurin \u200b Suatu fungsi f(x) yang memiliki f'(x), f''(x), f'''(x) , dan seterusnya yang kontinyu dalam interval I dengan maka untuk x disekitar a yaitu , f(x) dapat diekspansi kedalam deret taylor \u200b Algoritma dari maclaurin dengan algoritma itu kita dapat menyederhanakan sebagai berikut : Listing program import math error = 0.001 def f(x): f_turunan = 1 current=i=0 iteration = True while iteration: old= current current += (f_turunan*(x**i))/math.factorial(i) print('f ke-', i,'=',current, 'Ea=', current-old ) if current-old < error: iteration = False else: f_turunan *=3 i +=1 f(4) output f ke- 0 = 1.0 Ea= 1.0 f ke- 1 = 13.0 Ea= 12.0 f ke- 2 = 85.0 Ea= 72.0 f ke- 3 = 373.0 Ea= 288.0 f ke- 4 = 1237.0 Ea= 864.0 f ke- 5 = 3310.6 Ea= 2073.6 f ke- 6 = 7457.799999999999 Ea= 4147.199999999999 f ke- 7 = 14567.285714285714 Ea= 7109.4857142857145 f ke- 8 = 25231.514285714286 Ea= 10664.228571428572 f ke- 9 = 39450.485714285714 Ea= 14218.971428571429 f ke- 10 = 56513.25142857143 Ea= 17062.765714285713 f ke- 11 = 75127.17766233766 Ea= 18613.926233766237 f ke- 12 = 93741.1038961039 Ea= 18613.926233766237 f ke- 13 = 110923.18965034965 Ea= 17182.085754245752 f ke- 14 = 125650.69172541745 Ea= 14727.502075067794 f ke- 15 = 137432.69338547168 Ea= 11782.00166005423 f ke- 16 = 146269.19463051236 Ea= 8836.50124504068 f ke- 17 = 152506.7249211293 Ea= 6237.530290616938 f ke- 18 = 156665.07844820726 Ea= 4158.3535270779685 f ke- 19 = 159291.4069916249 Ea= 2626.3285434176505 f ke- 20 = 160867.20411767552 Ea= 1575.797126050602 f ke- 21 = 161767.65961827585 Ea= 900.4555006003357 f ke- 22 = 162258.81716405787 Ea= 491.1575457820145 f ke- 23 = 162515.07327490064 Ea= 256.25611084277625 f ke- 24 = 162643.20133032204 Ea= 128.12805542140268 f ke- 25 = 162704.7027969243 Ea= 61.501466602261644 f ke- 26 = 162733.08808920227 Ea= 28.385292277962435 f ke- 27 = 162745.70377465914 Ea= 12.61568545686896 f ke- 28 = 162751.1104969978 Ea= 5.406722338666441 f ke- 29 = 162753.3477614138 Ea= 2.237264416005928 f ke- 30 = 162754.2426671802 Ea= 0.8949057663849089 f ke- 31 = 162754.58908231556 Ea= 0.34641513536917046 f ke- 32 = 162754.71898799133 Ea= 0.12990567577071488 f ke- 33 = 162754.7662264189 Ea= 0.04723842756357044 f ke- 34 = 162754.7828988051 Ea= 0.016672386205755174 f ke- 35 = 162754.7886150518 Ea= 0.005716246698284522 f ke- 36 = 162754.79052046736 Ea= 0.0019054155563935637 f ke- 37 = 162754.79113843996 Ea= 0.0006179726042319089","title":"Error in Numerical Computations"},{"location":"Numerical Solution of Algebraic and Transcendental Equation/","text":"Numerical Solution of Algebraic and Transcendental Equation 1. Mencari akar dengan cara Bisection Metode bisection adalah algoritma pencarian akar pada sebuah interval. Interval tersebut membagi dua bagian lalu memilih bagian mana yang mengandung akar dan bagian yang tidak mengandung akar dibuang. Hal ini dilakukan berulang-ulang hingga diperoleh akar persamaan atau mendekati akar persamaan. Metode ini berlaku ketika ingin memecahkan persamaan dengan merupakan fungsi kontinyu. def bisection(f,a,b,N): if f(a)*f(b) >= 0: print(\"Bisection method fails.\") return None a_n = a b_n = b for n in range(1,N+1): m_n = (a_n + b_n)/2 f_m_n = f(m_n) if f(a_n)*f_m_n < 0: a_n = a_n b_n = m_n elif f(b_n)*f_m_n < 0: a_n = m_n b_n = b_n elif f_m_n == 0: print(\"Found exact solution.\") return m_n else: print(\"Bisection method fails.\") return None return (a_n + b_n)/2 f = lambda x: x**2 - 5*x + 6 approx_phi = bisection(f,1,2.3,25) print(approx_phi) output 1.9999999985098835 2. Mencari akar dengan cara Newton-Rapshon Metode Newton-Raphson adalah metode pencarian akar suatu fungsi dengan pendekatan satu titik, dimana fungsi mempunyai turunan. Metode ini dianggap lebih mudah dari Metode Bagi-Dua (Bisection Method) karena metode ini menggunakan pendekatan satu titik sebagai titik awal, semakin dekat titik awal yang kita pilih dengan akar sebenarnya maka semakin cepat konvergen ke akarnya. def newton(f,Df,x0,epsilon,max_iter): xn = x0 for n in range(0,max_iter): fxn = f(xn) if abs(fxn) < epsilon: print('Found solution after',n,'iterations.') return xn Dfxn = Df(xn) if Dfxn == 0: print('Zero derivative. No solution found.') return None xn = xn - fxn/Dfxn print('Exceeded maximum iterations. No solution found.') return None p = lambda x: x**2 - 5*x + 6 Dp = lambda x: 2*x - 5 approx = newton(p,Dp,1,1e-3,10) print(approx) output Found solution after 4 iterations. 1.9999847409781035 3. Mencari akar dengan cara Secant Pada Metode Newton-Raphson memerlukan syarat wajib yaitu fungsi harus memiliki turunan ., sehingga syarat wajib ini dianggap sulit karena tidak semua fungsi bisa dengan mudah mencari turunannya. Oleh karena itu, muncul ide dari yaitu mencari persamaan yang ekivalen dengan rumus turunan fungsi. Ide ini lebih dikenal dengan nama Metode Secant. Ide dari metode ini yaitu menggunakan gradien garis yang melalui titik dan . def secant(f,a,b,N): if f(a)*f(b) >= 0: print(\"Secant method fails.\") return None a_n = a b_n = b for n in range(1,N+1): m_n = a_n - f(a_n)*(b_n - a_n)/(f(b_n) - f(a_n)) f_m_n = f(m_n) if f(a_n)*f_m_n < 0: a_n = a_n b_n = m_n elif f(b_n)*f_m_n < 0: a_n = m_n b_n = b_n elif f_m_n == 0: print(\"Found exact solution.\") return m_n else: print(\"Secant method fails.\") return None return a_n - f(a_n)*(b_n - a_n)/(f(b_n) - f(a_n)) p = lambda x: x**2 - 5*x + 6 approx = secant(p,1,2.4,20) print(approx) output 2.0000003178913373 4. Mencari akar dengan cara Regulasi Falsi Metode Regular Falsi adalah panduan konsep Metode Bagi-Dua dan Metode Secant dimana menggunakan konsep Metode Bagi-Dua karena dimulai dengan pemilihan dua titik awal dan sedemikian sehingga dan berlawanan tanda atau . Kemudian menggunakan konsep Metode Secant yaitu dengan menarik garis dari titik dan sedemikian sehingga garis berpotongan pada sumbu \u2013 dan memotong kurva atau grafik fungsi pada titik dan . Sehingga Metode Regular Falsi ini akan menghasilkan titik potong pada sumbu- yaitu yang merupakan calon akar dan tetap berada dalam interval . Metode ini kemudian berlanjut dengan menghasilkan berturut-turut interval yang semuanya berisi akar . error = 0.01 a = 0 b = 2.1 def f(x): return x**2 - 5*x + 6 def regulasi_falsi(a,b): i=0 max_iter = 50 iteration = True while iteration and i < max_iter: if f(a)*f(b) < 0: x = (a*abs(f(b)) + b*abs(f(a))) / (abs(f(a)) + abs(f(b))) if f(a)*f(x) < 0: b = x if f(x)*f(b) < 0: a = x if abs(a-b) < error: iteration = False else: i+=1 else: print('tidak di temukan akar') print('x =', x) regulasi_falsi(a,b) output x = 2.000000000174259","title":"Numerical Solution of Algebraic and Transcendental Equation"},{"location":"Numerical Solution of Algebraic and Transcendental Equation/#numerical-solution-of-algebraic-and-transcendental-equation","text":"","title":"Numerical Solution of Algebraic and Transcendental Equation"},{"location":"Numerical Solution of Algebraic and Transcendental Equation/#1-mencari-akar-dengan-cara-bisection","text":"Metode bisection adalah algoritma pencarian akar pada sebuah interval. Interval tersebut membagi dua bagian lalu memilih bagian mana yang mengandung akar dan bagian yang tidak mengandung akar dibuang. Hal ini dilakukan berulang-ulang hingga diperoleh akar persamaan atau mendekati akar persamaan. Metode ini berlaku ketika ingin memecahkan persamaan dengan merupakan fungsi kontinyu. def bisection(f,a,b,N): if f(a)*f(b) >= 0: print(\"Bisection method fails.\") return None a_n = a b_n = b for n in range(1,N+1): m_n = (a_n + b_n)/2 f_m_n = f(m_n) if f(a_n)*f_m_n < 0: a_n = a_n b_n = m_n elif f(b_n)*f_m_n < 0: a_n = m_n b_n = b_n elif f_m_n == 0: print(\"Found exact solution.\") return m_n else: print(\"Bisection method fails.\") return None return (a_n + b_n)/2 f = lambda x: x**2 - 5*x + 6 approx_phi = bisection(f,1,2.3,25) print(approx_phi) output 1.9999999985098835","title":"1. Mencari akar dengan cara Bisection"},{"location":"Numerical Solution of Algebraic and Transcendental Equation/#2-mencari-akar-dengan-cara-newton-rapshon","text":"Metode Newton-Raphson adalah metode pencarian akar suatu fungsi dengan pendekatan satu titik, dimana fungsi mempunyai turunan. Metode ini dianggap lebih mudah dari Metode Bagi-Dua (Bisection Method) karena metode ini menggunakan pendekatan satu titik sebagai titik awal, semakin dekat titik awal yang kita pilih dengan akar sebenarnya maka semakin cepat konvergen ke akarnya. def newton(f,Df,x0,epsilon,max_iter): xn = x0 for n in range(0,max_iter): fxn = f(xn) if abs(fxn) < epsilon: print('Found solution after',n,'iterations.') return xn Dfxn = Df(xn) if Dfxn == 0: print('Zero derivative. No solution found.') return None xn = xn - fxn/Dfxn print('Exceeded maximum iterations. No solution found.') return None p = lambda x: x**2 - 5*x + 6 Dp = lambda x: 2*x - 5 approx = newton(p,Dp,1,1e-3,10) print(approx) output Found solution after 4 iterations. 1.9999847409781035","title":"2. Mencari akar dengan cara Newton-Rapshon"},{"location":"Numerical Solution of Algebraic and Transcendental Equation/#3-mencari-akar-dengan-cara-secant","text":"Pada Metode Newton-Raphson memerlukan syarat wajib yaitu fungsi harus memiliki turunan ., sehingga syarat wajib ini dianggap sulit karena tidak semua fungsi bisa dengan mudah mencari turunannya. Oleh karena itu, muncul ide dari yaitu mencari persamaan yang ekivalen dengan rumus turunan fungsi. Ide ini lebih dikenal dengan nama Metode Secant. Ide dari metode ini yaitu menggunakan gradien garis yang melalui titik dan . def secant(f,a,b,N): if f(a)*f(b) >= 0: print(\"Secant method fails.\") return None a_n = a b_n = b for n in range(1,N+1): m_n = a_n - f(a_n)*(b_n - a_n)/(f(b_n) - f(a_n)) f_m_n = f(m_n) if f(a_n)*f_m_n < 0: a_n = a_n b_n = m_n elif f(b_n)*f_m_n < 0: a_n = m_n b_n = b_n elif f_m_n == 0: print(\"Found exact solution.\") return m_n else: print(\"Secant method fails.\") return None return a_n - f(a_n)*(b_n - a_n)/(f(b_n) - f(a_n)) p = lambda x: x**2 - 5*x + 6 approx = secant(p,1,2.4,20) print(approx) output 2.0000003178913373","title":"3. Mencari akar dengan cara Secant"},{"location":"Numerical Solution of Algebraic and Transcendental Equation/#4-mencari-akar-dengan-cara-regulasi-falsi","text":"Metode Regular Falsi adalah panduan konsep Metode Bagi-Dua dan Metode Secant dimana menggunakan konsep Metode Bagi-Dua karena dimulai dengan pemilihan dua titik awal dan sedemikian sehingga dan berlawanan tanda atau . Kemudian menggunakan konsep Metode Secant yaitu dengan menarik garis dari titik dan sedemikian sehingga garis berpotongan pada sumbu \u2013 dan memotong kurva atau grafik fungsi pada titik dan . Sehingga Metode Regular Falsi ini akan menghasilkan titik potong pada sumbu- yaitu yang merupakan calon akar dan tetap berada dalam interval . Metode ini kemudian berlanjut dengan menghasilkan berturut-turut interval yang semuanya berisi akar . error = 0.01 a = 0 b = 2.1 def f(x): return x**2 - 5*x + 6 def regulasi_falsi(a,b): i=0 max_iter = 50 iteration = True while iteration and i < max_iter: if f(a)*f(b) < 0: x = (a*abs(f(b)) + b*abs(f(a))) / (abs(f(a)) + abs(f(b))) if f(a)*f(x) < 0: b = x if f(x)*f(b) < 0: a = x if abs(a-b) < error: iteration = False else: i+=1 else: print('tidak di temukan akar') print('x =', x) regulasi_falsi(a,b) output x = 2.000000000174259","title":"4. Mencari akar dengan cara Regulasi Falsi"},{"location":"Romberg/","text":"METODE INTEGRASI ROMBERG A. Pengertian Integrasi Romberg merupakan teknik yang digunakan dalam integrasi numerik untuk menganalisis kasus dimana fungsi yang akan diintegrasikan tersedia. Teknik ini memiliki keunggulan untuk menghasilkan nilai-nilai dari fungsi yang digunakan untuk mengembangkan skema yang efisien bagi pengintegrasian secara numerik. Integrasi Romberg didasarkan pada ekstrapolasi Richardson ( Richardson's extrapolation ), yaitu metode untuk mengkombinasikan dua perkiraan integral secara numerik untuk memperoleh nilai ketiga, yang lebih akurat. Teknik ini bersifat rekursif dan dapat digunakan untuk menghasilkan sebuah perkiraan integral dalam batas toleransi kesalahan ( error tolerance ) yang sudah ditentukan terlebih dahulu. Metode ini digunakan untuk memperbaiki hasil pendekatan integrasi metode trapesium, karena kesalahan metode trapesium \u201ccukup\u201d besar untuk polinom untuk polinom pangkat tinggi dan fungsi transeden. Pada proses integrasi Romberg, mula-mula kita hitung kuadratur dengan lebar langkah h dan 2h. Defisini kuadratur adalah Untuk menurunkan galat hampiran integral dari O(h2) menjadi O(h2n + 2) dapat digunakan ekstrapolasi Richardson seperti dinyatakan dalam teorema : jika didefinisikan barisan kuadratur {I(i,j) : i >= j dimana j =1, 2, 3, ....} untuk hampiran integral f(x) pada [a, b] sebagai: \u200b I (i, 1) = Ti \u2013 1. i \u2265 1 ( barisan aturan trapezium majemuk) \u200b I (i, 2) = Si \u2013 1. i \u2265 2 (barisan aturan Simpson majemuk) \u200b I (i, 3) = Bi \u2013 1. i \u2265 3 (barisan aturan Boole majemuk) Maka integrasi romberg untuk meningkatkan keakuratan hampiran integral dapat di tulis sebagai B. Code Program import numpy as np def trapezcomp(f, a, b, n): \"\"\" Composite trapezoidal function integration INPUTS: f: the function to integrate a: lower bound of integration b: upper bound n: number of panels to create between ``a`` and ``b`` \"\"\" # Initialization h = (b - a) / n x = a # Composite rule In = f(a) for k in range(1, n): x = x + h In += 2*f(x) return (In + f(b))*h*0.5 def romberg(f, a, b, p): \"\"\" Romberg integration INPUTS: f: the function to integrate a: lower bound of integration b: upper bound p: number of rows in the Romberg table \"\"\" I = np.zeros((p, p)) for k in range(0, p): # Composite trapezoidal rule for 2^k panels I[k, 0] = trapezcomp(f, a, b, 2**k) # Romberg recursive formula for j in range(0, k): I[k, j+1] = (4**(j+1) * I[k, j] - I[k-1, j]) / (4**(j+1) - 1) print(I[k, 0:k+1]) # display intermediate results return I if __name__ == '__main__': def func(x): return np.sin(x) p_rows = 4 I = romberg(func, 0, np.pi/2, p_rows) solution = I[p_rows-1, p_rows-1] print(solution) # 1.00000000814 C. Output Microsoft Windows [Version 10.0.18362.657] (c) 2019 Microsoft Corporation. All rights reserved. C:\\Kuliah\\KomputasiNumerik>python romberg.py [0.78539816] [0.94805945 1.00227988] [0.9871158 1.00013458 0.99999157] [0.99678517 1.0000083 0.99999988 1.00000001] 1.0000000081440203","title":"**METODE INTEGRASI ROMBERG**"},{"location":"Romberg/#metode-integrasi-romberg","text":"","title":"METODE INTEGRASI ROMBERG"},{"location":"Romberg/#a-pengertian","text":"Integrasi Romberg merupakan teknik yang digunakan dalam integrasi numerik untuk menganalisis kasus dimana fungsi yang akan diintegrasikan tersedia. Teknik ini memiliki keunggulan untuk menghasilkan nilai-nilai dari fungsi yang digunakan untuk mengembangkan skema yang efisien bagi pengintegrasian secara numerik. Integrasi Romberg didasarkan pada ekstrapolasi Richardson ( Richardson's extrapolation ), yaitu metode untuk mengkombinasikan dua perkiraan integral secara numerik untuk memperoleh nilai ketiga, yang lebih akurat. Teknik ini bersifat rekursif dan dapat digunakan untuk menghasilkan sebuah perkiraan integral dalam batas toleransi kesalahan ( error tolerance ) yang sudah ditentukan terlebih dahulu. Metode ini digunakan untuk memperbaiki hasil pendekatan integrasi metode trapesium, karena kesalahan metode trapesium \u201ccukup\u201d besar untuk polinom untuk polinom pangkat tinggi dan fungsi transeden. Pada proses integrasi Romberg, mula-mula kita hitung kuadratur dengan lebar langkah h dan 2h. Defisini kuadratur adalah Untuk menurunkan galat hampiran integral dari O(h2) menjadi O(h2n + 2) dapat digunakan ekstrapolasi Richardson seperti dinyatakan dalam teorema : jika didefinisikan barisan kuadratur {I(i,j) : i >= j dimana j =1, 2, 3, ....} untuk hampiran integral f(x) pada [a, b] sebagai: \u200b I (i, 1) = Ti \u2013 1. i \u2265 1 ( barisan aturan trapezium majemuk) \u200b I (i, 2) = Si \u2013 1. i \u2265 2 (barisan aturan Simpson majemuk) \u200b I (i, 3) = Bi \u2013 1. i \u2265 3 (barisan aturan Boole majemuk) Maka integrasi romberg untuk meningkatkan keakuratan hampiran integral dapat di tulis sebagai","title":"A. Pengertian"},{"location":"Romberg/#b-code-program","text":"import numpy as np def trapezcomp(f, a, b, n): \"\"\" Composite trapezoidal function integration INPUTS: f: the function to integrate a: lower bound of integration b: upper bound n: number of panels to create between ``a`` and ``b`` \"\"\" # Initialization h = (b - a) / n x = a # Composite rule In = f(a) for k in range(1, n): x = x + h In += 2*f(x) return (In + f(b))*h*0.5 def romberg(f, a, b, p): \"\"\" Romberg integration INPUTS: f: the function to integrate a: lower bound of integration b: upper bound p: number of rows in the Romberg table \"\"\" I = np.zeros((p, p)) for k in range(0, p): # Composite trapezoidal rule for 2^k panels I[k, 0] = trapezcomp(f, a, b, 2**k) # Romberg recursive formula for j in range(0, k): I[k, j+1] = (4**(j+1) * I[k, j] - I[k-1, j]) / (4**(j+1) - 1) print(I[k, 0:k+1]) # display intermediate results return I if __name__ == '__main__': def func(x): return np.sin(x) p_rows = 4 I = romberg(func, 0, np.pi/2, p_rows) solution = I[p_rows-1, p_rows-1] print(solution) # 1.00000000814","title":"B. Code Program"},{"location":"Romberg/#c-output","text":"Microsoft Windows [Version 10.0.18362.657] (c) 2019 Microsoft Corporation. All rights reserved. C:\\Kuliah\\KomputasiNumerik>python romberg.py [0.78539816] [0.94805945 1.00227988] [0.9871158 1.00013458 0.99999157] [0.99678517 1.0000083 0.99999988 1.00000001] 1.0000000081440203","title":"C. Output"}]}